@using Models
@using Models.Prototypes
@using Microsoft.Extensions.Logging

@inject ILogger<JournalForm> _logger;

<form @onsubmit="SubmitJournal">
    <fieldset>
        <h5>Strategy</h5>
        <p class="field">
            <label class="select" for="prototype-type">
                <select id="prototype-type" @bind="SelectedStrategy">
                    @foreach (var strategy in Strategies)
                    {
                        <option>@strategy</option>
                    }
                </select>
            </label>
        </p>
    </fieldset>
    <fieldset>
        <h5>Journal</h5>
        <p class="field">
            <label for="journal-title">Title</label>
            <input id="journal-title" type="text" @bind-value="Title" />
        </p>
        <p class="field">
            <input id="journal-status" type="checkbox" @bind-value="Active" />
            <label for="journal-status">Active?</label>
        </p>
    </fieldset>
    <fieldset>
        <p class="field">
            <div class="button-group button-group-block">
                <button type="submit" class="button">Submit</button>
                <button type="reset" class="button">Reset</button>
            </div>
        </p>
    </fieldset>
</form>

@code {

    [Parameter]
    public EventCallback<Journal> OnJournalSubmitted { get; set; }

    [Parameter]
    public Journal Base { get; set; }

    public IEnumerable<string> Strategies => Prototypes.PrototypeTypes;
    public string SelectedStrategy { get; set; } = Prototypes.PrototypeTypes.First();

    public string Title { get; set; }
    public bool Active { get; set; }


    public void SubmitJournal()
    {
        var method = ApplyUpdatesToBase(SelectedStrategy, Title, Active);
        OnJournalSubmitted.InvokeAsync(method());
    }

    private Func<Journal> ApplyUpdatesToBase(string strategy, string title, bool active)
    {
        Func<Journal> selectedStrategy;
        Func<Journal, Journal> applyUpdatesToJournal = (j) =>
        {
            j.Title = title;
            j.Active = active;
            return j;
        };

        switch (strategy)
        {
            case Prototypes.None:
                selectedStrategy = () =>
                {
                    _logger?.LogDebug("Applying updates to Base {@Journal}", Base);
                    return Base;                    
                };
                break;
            case Prototypes.Instances:
                selectedStrategy = () =>
                {
                    var subject = Journal.Default;
                    _logger?.LogDebug("Applying updates to Default {@Journal}", Journal.Default);                    
                    return subject;
                };
                break;
            case Prototypes.CopyCtor:
                selectedStrategy = () =>
                {
                    var subject = new Journal(Base);
                    _logger?.LogDebug("Applying updates to a CopyCtor {@Journal}", subject);                    
                    return subject;
                };
                break;
            case Prototypes.Cloneable:
                selectedStrategy = () =>
                {
                    var subject = (Journal)Base.Clone();
                    _logger?.LogDebug("Applying updates to a Clone {@Journal}", subject);                    
                    return subject;
                };
                break;
            default:
                throw new InvalidOperationException("Selected strategy is not supported");
        }
        return () =>
        {
            var subject = selectedStrategy();            
            return applyUpdatesToJournal(subject);
        };
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Title = Base.Title;
        Active = Base.Active;
    }
}