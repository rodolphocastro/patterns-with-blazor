@using Models
@using Models.Builders

<form @onsubmit="BuildPerson">
  <fieldset>
    <h4>Selected Builder</h4>
    <p class="field">
      <label class="select" for="builder-type">
        <select id="builder-type" @bind="SelectedBuilderType">
          @foreach (var type in BuilderTypes)
          {
            <option>@type</option>
          }
        </select>
      </label>
    </p>
  </fieldset>
  <fieldset>
    <h4>Person</h4>
    <p class="field">
      <label for="person-name">Name</label>
      <input id="person-name" type="text" placeholder="John Smith" @bind-value="Name" />
    </p>
    <p class="field">
      <label for="person-dob">Date of Birth</label>
      <input id="person-dob" type="date" @bind-value="DateOfBirth" />
    </p>
  </fieldset>
  <fieldset>
    <h4>Address</h4>
    <p class="field">
      <label class="select" for="address-type">
        <select id="address-type" @bind="SelectedAddressType">
          @foreach (var type in AddressTypes)
          {
            <option>@type</option>
          }
        </select>
      </label>
    </p>
    <fieldset>
      <p class="field">
        <label for="address-country">Country</label>
        <input id="address-country" type="text" @bind-value="AddressCountryName" />
      </p>
      <p class="field">
        <label for="address-state">State</label>
        <input id="address-state" type="text" @bind-value="AddressStateName" placeholder="New York" />
      </p>
      <p class="field">
        <label for="address-city">City</label>
        <input id="address-city" type="text" @bind-value="AddressCityName" placeholder="New York" />
      </p>
      <p class="field">
        <label for="address-street">Street</label>
        <input id="address-street" type="text" @bind-value="AddressStreet" placeholder="7th Avenue" />
      </p>
      <p class="field">
        <label for="address-number">Number</label>
        <input id="address-number" type="number" @bind-value="AddressNumber" placeholder="0" />
      </p>
    </fieldset>
    <p class="field">
      <div class="button-group button-group-block">
        <button type="submit" class="button">Submit</button>
        <button type="reset" class="button">Reset</button>
      </div>
    </p>
  </fieldset>
</form>

@code {
    public string Name { get; set; }

    public DateTimeOffset? DateOfBirth { get; set; }

    public IEnumerable<string> AddressTypes => new List<string> { AddressType.HomeAddress, AddressType.BusinessAddress };

    public string SelectedAddressType { get; set; } = AddressType.HomeAddress;

    public string AddressStreet { get; set; }

    public int? AddressNumber { get; set; }

    public string AddressCityName { get; set; }

    public string AddressStateName { get; set; }

    public string AddressCountryName { get; set; }

    public IEnumerable<string> BuilderTypes => Builders.Types;
    public string SelectedBuilderType { get; set; } = Builders.FluentType;

    [Parameter]
    public EventCallback<Person> OnPersonBuilt { get; set; }

    public async Task BuildPerson()
    {
      Person result;
      switch (SelectedBuilderType)
      {
        case Builders.FluentType:
          result = BuildWithFluent();
          break;
        case Builders.FunctionalType:
          result = BuildWithFunctional();
          break;
        case Builders.FacetedType:
          result = BuildWithFaceted();
          break;
        default:
          throw new ArgumentException();
      }

      await OnPersonBuilt.InvokeAsync(result);
    }

    private Person BuildWithFluent()
    {
      var pBuilder = Builders.PersonBuilders.Fluent;
      var aBuilder = Builders.AddressBuilders.Fluent;

      aBuilder
        .WithCountry(AddressCountryName)
        .WithState(AddressStateName)
        .WithCity(AddressCityName)
        .WithStreet(AddressStreet)
        .WithNumber(AddressNumber);

      var result = pBuilder
        .Named(Name)
        .BornIn(DateOfBirth)
        .WithAddress(SelectedAddressType, aBuilder.Build())
        .Build();

      return result;
    }

    private Person BuildWithFunctional()
    {
      var pBuilder = Builders.PersonBuilders.Functional;
      var aBuilder = Builders.AddressBuilders.Functional;

      _ = pBuilder
        .Named(Name)
        .BornIn(DateOfBirth);

      _ = aBuilder
        .AtCountry(AddressCountryName)
        .AtState(AddressStateName)
        .AtCity(AddressCityName)
        .AtStreet(AddressStreet)
        .AtNumber(AddressNumber);

      if (SelectedAddressType.Equals(AddressType.HomeAddress))
      {
        _ = pBuilder.LivesAt(aBuilder.Build());
      }
      else
      {
        _ = pBuilder.WorksAt(aBuilder.Build());
      }

      return pBuilder.Build();
    }

    private Person BuildWithFaceted()
    {
      var builder = Builders.PersonBuilders.Faceted;

      _ = builder.Person
        .Named(Name)
        .BornIn(DateOfBirth);

      if (SelectedAddressType.Equals(AddressType.HomeAddress))
      {
        _ = builder.Lives
          .WithCountry(AddressCountryName)
          .WithState(AddressStateName)
          .WithCity(AddressCityName)
          .WithStreet(AddressStreet)
          .WithNumber(AddressNumber);
      }
      else
      {
        _ = builder.Works
          .WithCountry(AddressCountryName)
          .WithState(AddressStateName)
          .WithCity(AddressCityName)
          .WithStreet(AddressStreet)
          .WithNumber(AddressNumber);
      }

      return builder.Build();
    }
}
