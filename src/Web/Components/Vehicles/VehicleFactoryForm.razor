@using Models
@using Models.Factories

@inject VehicleFactory _factory
@inject AbstractVehicleFactory _abstractFactory

<form @onsubmit="SubmitVehicle">
    <fieldset>
        <h4>Strategy</h4>
        <p class="field">
            <label class="select" for="factory-type">
                <select id="factory-type" @bind="SelectedFactoryType">
                    @foreach (var type in Factories.Types)
                    {
                        <option>@type</option>
                    }
                </select>
            </label>
        </p>
    </fieldset>
    <fieldset>
        <h4>Vehicle</h4>
        <p class="field">
            <label class="select" for="vehicle-type">
                <select id="vehicle-type" @bind="SelectedVehicleType">
                    @foreach (var type in VehicleTypes.TypesList)
                    {
                        <option>@type</option>
                    }
                </select>
            </label>
        </p>
        <p class="field">
            <label class="select" for="vehicle-make">
                <select id="vehicle-make" @bind="SelectedVehicleMake">
                    @foreach (var make in VehicleMakes.Makes)
                    {
                        <option>@make</option>
                    }
                </select>
            </label>
        </p>
        <p class="field">
            <label for="vehicle-model">Model</label>
            <input id="vehicle-model" type="text" @bind-value="Model" />
        </p>
        <p class="field">
            <label for="vehicle-doors">Doors</label>
            <input id="vehicle-doors" type="number" placeholder="4" @bind-value="Doors" />
        </p>
    </fieldset>
    <fieldset>
        <p class="field">
            <div class="button-group button-group-block">
                <button type="submit" class="button">Submit</button>
                <button type="reset" class="button">Reset</button>
            </div>
        </p>
    </fieldset>
</form>

@code {
    public string SelectedFactoryType { get; set; } = Factories.MethodFactory;
    public string SelectedVehicleType { get; set; } = VehicleTypes.Car;
    public string SelectedVehicleMake { get; set; } = string.Empty;
    public string Model { get; set; }
    public int? Doors { get; set; } = null;

    [Parameter]
    public EventCallback<Vehicle> OnVehicleSubmitted { get; set; }

    public void SubmitVehicle()
    {
        OnVehicleSubmitted.InvokeAsync(CreateByType(SelectedVehicleMake, Model, Doors));
    }

    private Vehicle CreateByType(string make, string model, int? doors)
    {
        switch (SelectedVehicleType)
        {
            case VehicleTypes.Car:
                return CreateCar(make, model, (int)doors);
            case VehicleTypes.Motorcycle:
                return CreateMotorcycle(make, model);
            case VehicleTypes.Spaceship:
                return CreateSpaceship(make, model, doors);
            case VehicleTypes.Unicycle:
                return CreateUnicycle(make, model);
            default:
                throw new InvalidOperationException("Selected type is not supported");
        }
    }

    private Vehicle CreateCar(string make, string model, int doors)
    {
        switch (SelectedFactoryType)
        {
            case Factories.MethodFactory:
                return Vehicle.CreateNewCar(0, make, model, doors);
            case Factories.ClassFactory:
                return _factory.CreateNewCar(0, make, model, doors);
            case Factories.AbstractFactory:
                return (Vehicle)_abstractFactory.CreateNewCar(0, make, model, doors);
            default:
                throw new InvalidOperationException("Tipo não suportado");
        }
    }

    private Vehicle CreateMotorcycle(string make, string model)
    {
        switch (SelectedFactoryType)
        {
            case Factories.MethodFactory:
                return Vehicle.CreateNewMotorcycle(0, make, model);
            case Factories.ClassFactory:
                return _factory.CreateNewMotorcycle(0, make, model);
            case Factories.AbstractFactory:
                return (Vehicle)_abstractFactory.CreateNewMotorcycle(0, make, model);
            default:
                throw new InvalidOperationException("Tipo não suportado");
        }
    }

    private Vehicle CreateSpaceship(string make, string model, int? doors)
    {
        switch (SelectedFactoryType)
        {
            case Factories.MethodFactory:
                return Vehicle.CreateNewSpaceship(0, make, model, doors);
            case Factories.ClassFactory:
                return _factory.CreateNewSpaceship(0, make, model, doors);
            case Factories.AbstractFactory:
                return (Vehicle)_abstractFactory.CreateNewSpaceship(0, make, model, doors);
            default:
                throw new InvalidOperationException("Tipo não suportado");
        }
    }

    private Vehicle CreateUnicycle(string make, string model)
    {
        switch (SelectedFactoryType)
        {
            case Factories.MethodFactory:
                return Vehicle.CreateNewUnicycle(0, make, model);
            case Factories.ClassFactory:
                return _factory.CreateNewUnicycle(0, make, model);
            case Factories.AbstractFactory:
                return (Vehicle)_abstractFactory.CreateNewUnicycle(0, make, model);
            default:
                throw new InvalidOperationException("Tipo não suportado");
        }
    }
}